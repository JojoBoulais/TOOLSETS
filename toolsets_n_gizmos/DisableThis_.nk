set cut_paste_input [stack 0]
version 12.0 v3
push $cut_paste_input
NoOp {
name DisableThis_
onCreate "nuke.thisNode()\['select_class'].setFlag(nuke.READ_ONLY)\nnuke.thisNode().knob('link_total_update').execute()"
onDestroy "\nnodename = 'DisableThis_'\nexp = 'parent.' + nodename + '.DT__state'\nref = '\{' + exp + '\}'\nalt = '\{!' + exp + '\}'\n\nfor node in nuke.allNodes():\n    if node.knob('disable'):\n        if node\['disable'].hasExpression():\n            if node\['disable'].toScript() in \[ref, alt]:\n                \n                node\['disable'].clearAnimated()\n                node\['disable'].setValue(False)\n                # SET COLOR TO DEFAULT\n                tileColor = node\['tile_color']\n                tileColor.setValue(0)\n                label = node\['label']\n                #REMET UNE COULOUR DEFINI PAR UN USER\n                try:\n                    node\['tileColor']\n                    defaultValue = int(node\['tileColor'].value())\n                    tileColor.setValue(defaultValue)\n                    node.removeKnob(node\['tileColor'])\n                except:\n                    pass\n                # SET LABEL TO DEFAULT\n                try:\n                    setLabel = \"\"\n                    splits = label.value().split('\\nFARM ONLY')\n                    for split in splits:\n                        setLabel = setLabel + split\n                    label.setValue(setLabel)\n                    label.setEnabled(True)\n                except:\n                    pass\n\n\n\n"
knobChanged "\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k == n\['disable']:\n\n    nodename = n.knob('name').value()\n    exp = 'parent.'+nodename+'.DT__state'\n    inv_exp = '!'+exp\n\n\n    color = \[16711935, 4278190335, 4286513407, 8388607]\n    if nuke.thisKnob().name() in \['disable','enable']:\n        n\['tile_color'].setValue(color\[int(n\['state_link'].value())])\n    if nuke.thisKnob().name() in \['from']:\n        n\['use'].setVisible(n\['from'].value()=='Upstream')\n\n\n    nodename = n.knob('name').value()\n    exp = 'parent.' + nodename + '.DT__state'\n    inv_exp = '!' + exp\n    ref = '\{'+exp+'\}'\n    alt = '\{!'+exp+'\}'\n\n\n    for node in nuke.allNodes():\n        if node is not n:\n            if node.knob('disable'):\n                if node\['disable'].hasExpression():\n                    if node\['disable'].toScript() in \[ref, alt]:\n                        if node\['disable'].value() == False:\n                            # SET COLOR TO DEFAULT\n                            tileColor = node\['tile_color']\n                            tileColor.setValue(0)\n                            label = node\['label']\n                            # REMET UNE COULOUR DEFINI PAR UN USER\n                            try:\n                                node\['tileColor']\n                                defaultValue = int(node\['tileColor'].value())\n                                tileColor.setValue(defaultValue)\n                                node.removeKnob(node\['tileColor'])\n                            except:\n                                pass\n                            # SET LABEL TO DEFAULT\n                            setLabel = \"\"\n                            splits = label.value().split('\\nFARM ONLY')\n                            for split in splits:\n                                setLabel = setLabel + split\n                            label.setValue(setLabel)\n                            label.setEnabled(True)\n\n                        else:\n                            tile = node\['tile_color']\n                            tileColor = node\['tile_color']\n                            tileValue = tile.value()\n                            label = node\['label']\n                            # SI LA NODE A UNE COLOUR DEFINI PAR UN USER, ELLE EST ENREGISTRER\n                            if tileValue != 0:\n                                tileColorK = nuke.Array_Knob('tileColor')\n                                tileColorK.setValue(int(tileValue))\n                                node.addKnob(tileColorK)\n                                tileColorK.setEnabled(False)\n                                tileColorK.setVisible(False)\n                            tileColor.setValue(4286513407)\n                            # CHANGE LABEL\n                            setLabel = label.value() + \"\\nFARM ONLY\"\n                            label.setValue(setLabel)\n                            label.setEnabled(False)\n\n    \n"
tile_color 0xff7f00ff
label "\[value select_class]\n\[value link_total] links"
note_font "Bitstream Vera Sans Bold"
note_font_size 15
selected true
xpos 19686
ypos 175
addUserKnob {20 control}
addUserKnob {1 _klass +INVISIBLE}
_klass VF_DisableThis
addUserKnob {26 text_1 l " " T " "}
addUserKnob {1 select_class l Class t "list of node type that can be selected"}
addUserKnob {22 add_class l " add Class of selected nodes " T "class_string = nuke.thisNode().knob('select_class').value()\nclass_list = class_string.split(',')\nclass_list.pop(-1)\n\nfor node in nuke.selectedNodes():\n    if node is nuke.thisNode():\n        continue\n    nodeClass = node.Class()\n    if node.knob('disable'):\n        if nodeClass not in class_list:\n            class_string = class_string+nodeClass+','\n            class_list.append(nodeClass)\n\nnuke.thisNode().knob('select_class').setValue(class_string)" +STARTLINE}
addUserKnob {22 sub_class l " remove Class of selected nodes " -STARTLINE T "class_string = nuke.thisNode().knob('select_class').value()\nclass_list = class_string.split(',')\nclass_list.pop(-1)\n\nfor node in nuke.selectedNodes():\n    if node is nuke.thisNode():\n        continue\n    nodeClass = node.Class()\n    if node.knob('disable'):\n        if nodeClass in class_list:\n            class_list.remove(nodeClass)\n\nnew_string = ''\nfor item in class_list:\n    new_string = new_string+item+','\n\nnuke.thisNode().knob('select_class').setValue(new_string)"}
addUserKnob {22 clear_class l " clear " -STARTLINE T nuke.thisNode().knob('select_class').setValue('')}
addUserKnob {26 text_5 l " " T " "}
addUserKnob {22 link_class l " link nodes in Class " T "n = nuke.thisNode()\nnodename = n.knob('name').value()\nexp = 'parent.' + nodename + '.DT__state'\ninv_exp = '!' + exp\n\noption = nuke.thisNode().knob('from').value()\nclass_string = nuke.thisNode().knob('select_class').value()\nclass_list = class_string.split(',')\nclass_list.pop(-1)\n\nif option == 'All script':\n    nodes = nuke.allNodes()\nelif option == 'Selected Nodes':\n    nodes = nuke.selectedNodes()\nelif option == 'In this backdrop':\n    backdropNodes = nuke.allNodes('BackdropNode')\n    valid_list = \[]\n    for backdrop in backdropNodes:\n        if nuke.thisNode() in backdrop.getNodes():\n            valid_list.append(backdrop)\n    if len(valid_list) == 0:\n        nuke.message('not in a BackdropNode')\n        nodes = \[]\n    elif len(valid_list) == 1:\n        nodes = valid_list\[0].getNodes()\n    else:\n        p = nuke.Panel('channels')\n        p.addEnumerationPulldown('backdrop', ' '.join(\[bdn.name() for bdn in valid_list]))\n        if p.show():\n            nodes = nuke.toNode(p.value('backdrop')).getNodes()\n        else:\n            nodes = \[]\nelif option == 'Upstream':\n    nodes = set()\n    depsList = \[nuke.thisNode()]\n    while depsList:\n        if nuke.thisNode().knob('use').value() is True:\n            deps = nuke.dependencies(depsList, nuke.INPUTS | nuke.HIDDEN_INPUTS)\n        else:\n            deps = nuke.dependencies(depsList, nuke.INPUTS)\n        depsList = \[i for i in deps if i not in nodes and not nodes.add(i)]\n\nfor node in nodes:\n    if node is not nuke.thisNode():\n        if node.knob('disable') and node.Class() in class_list:\n            node\['disable'].setExpression(exp)\n            if node\['disable'].value() == False:\n                pass\n            else:\n                #NODEGRAPH\n                tile = node\['tile_color']\n                tileColor = node\['tile_color']\n                tileValue = tile.value()\n                label = node\['label']\n                #SI LA NODE A UNE COLOUR DEFINI PAR UN USER, ELLE EST ENREGISTRER\n                if tileValue != 0:\n                    tileColorK = nuke.Array_Knob('tileColor')\n                    tileColorK.setValue(int(tileValue))\n                    node.addKnob(tileColorK)\n                    tileColorK.setEnabled(False)\n                    tileColorK.setVisible(False)\n                tileColor.setValue(4286513407)\n                #CHANGE LABEL\n                setLabel = label.value() + \"\\nFARM ONLY\"\n                label.setValue(setLabel)\n                label.setEnabled(False)\n\n\n\n\nnuke.thisNode().knob('link_total_update').execute()" +STARTLINE}
addUserKnob {4 from l " from " -STARTLINE M {"All script" Upstream "In this backdrop" "Selected Nodes" "" "" "" "" ""}}
addUserKnob {6 use l " and check for hidden input" -STARTLINE +HIDDEN}
use true
addUserKnob {26 ""}
addUserKnob {22 link_select_nodes l " link selected nodes " T "n = nuke.thisNode()\nnodename = n.knob('name').value()\nexp = 'parent.'+nodename+'.DT__state'\ninv_exp = '!'+exp\n\nnodes = nuke.selectedNodes()\n\nfor node in nodes:\n    if node is not nuke.thisNode():\n        if node.knob('disable'):\n            d = node.knob('disable').value()\n            node\['disable'].setExpression(exp)\n            if node\['disable'].value() == False:\n                pass\n            else:\n                #NODEGRAPH\n                tile = node\['tile_color']\n                tileColor = node\['tile_color']\n                tileValue = tile.value()\n                label = node\['label']\n                #SI LA NODE A UNE COLOUR DEFINI PAR UN USER, ELLE EST ENREGISTRER\n                if tileValue != 0:\n                    tileColorK = nuke.Array_Knob('tileColor')\n                    tileColorK.setValue(int(tileValue))\n                    node.addKnob(tileColorK)\n                    tileColorK.setEnabled(False)\n                    tileColorK.setVisible(False)\n                tileColor.setValue(4286513407)\n                #CHANGE LABEL\n                setLabel = label.value() + \"\\nFARM ONLY\"\n                label.setValue(setLabel)\n                label.setEnabled(False)\n\n\nnuke.thisNode().knob('link_total_update').execute()" +STARTLINE}
addUserKnob {26 ""}
addUserKnob {22 invert_selected l " invert selected " T "nodename = nuke.thisNode().knob('name').value()\nexp = 'parent.'+nodename+'.DT__state'\ninv_exp = '!'+exp\nref = '\{'+exp+'\}'\nalt = '\{!'+exp+'\}'\n\nfor node in nuke.selectedNodes():\n    if node is not nuke.thisNode():\n        if node.knob('disable'):\n            if node\['disable'].hasExpression():\n                if node\['disable'].toScript() == ref:\n                    node\['disable'].setExpression(inv_exp)\n                elif node\['disable'].toScript() == alt:\n                    node\['disable'].setExpression(exp)\n                if node\['disable'].value() == True:\n                    # NODEGRAPH\n                    tile = node\['tile_color']\n                    tileColor = node\['tile_color']\n                    tileValue = tile.value()\n                    # SI LA NODE A UNE COLOUR DEFINI PAR UN USER, ELLE EST ENREGISTRER\n                    if tileValue != 0:\n                        tileColorK = nuke.Array_Knob('tileColor')\n                        tileColorK.setValue(int(tileValue))\n                        node.addKnob(tileColorK)\n                        tileColorK.setEnabled(False)\n                        tileColorK.setVisible(False)\n                    tileColor.setValue(4286513407)\n                    # CHANGE LABEL\n                    label = node\['label']\n                    setLabel = label.value() + \"\\nFARM ONLY\"\n                    label.setValue(setLabel)\n                    label.setEnabled(False)\n                if node\['disable'].value() == False:\n                    tileColor = node\['tile_color']\n                    tileColor.setValue(0)\n                    label = node\['label']\n                    # REMET UNE COULOUR DEFINI PAR UN USER\n                    try:\n                        node\['tileColor']\n                        defaultValue = int(node\['tileColor'].value())\n                        tileColor.setValue(defaultValue)\n                        node.removeKnob(node\['tileColor'])\n                    except:\n                        pass\n                    # SET LABEL TO DEFAULT\n                    setLabel = \"\"\n                    splits = label.value().split('\\nFARM ONLY')\n                    for split in splits:\n                        setLabel = setLabel + split\n                    label.setValue(setLabel)\n                    label.setEnabled(True)\n" +STARTLINE}
addUserKnob {22 invert_all l " invert all " -STARTLINE T "nodename = nuke.thisNode().knob('name').value()\nexp = 'parent.'+nodename+'.DT__state'\ninv_exp = '!'+exp\nref = '\{'+exp+'\}'\nalt = '\{!'+exp+'\}'\n\nfor node in nuke.allNodes():\n    if node is not nuke.thisNode():\n        if node.knob('disable'):\n            if node\['disable'].hasExpression():\n                if node\['disable'].toScript() == ref:\n                    node\['disable'].setExpression(inv_exp)\n                elif node\['disable'].toScript() == alt:\n                    node\['disable'].setExpression(exp)\n                if node\['disable'].value() == True:\n                    # NODEGRAPH\n                    tile = node\['tile_color']\n                    tileColor = node\['tile_color']\n                    tileValue = tile.value()\n                    # SI LA NODE A UNE COLOUR DEFINI PAR UN USER, ELLE EST ENREGISTRER\n                    if tileValue != 0:\n                        tileColorK = nuke.Array_Knob('tileColor')\n                        tileColorK.setValue(int(tileValue))\n                        node.addKnob(tileColorK)\n                        tileColorK.setEnabled(False)\n                        tileColorK.setVisible(False)\n                    tileColor.setValue(4286513407)\n                    # CHANGE LABEL\n                    label = node\['label']\n                    setLabel = label.value() + \"\\nFARM ONLY\"\n                    label.setValue(setLabel)\n                    label.setEnabled(False)\n                if node\['disable'].value() == False:\n                    tileColor = node\['tile_color']\n                    tileColor.setValue(0)\n                    label = node\['label']\n                    # REMET UNE COULOUR DEFINI PAR UN USER\n                    try:\n                        node\['tileColor']\n                        defaultValue = int(node\['tileColor'].value())\n                        tileColor.setValue(defaultValue)\n                        node.removeKnob(node\['tileColor'])\n                    except:\n                        pass\n                    # SET LABEL TO DEFAULT\n                    setLabel = \"\"\n                    splits = label.value().split('\\nFARM ONLY')\n                    for split in splits:\n                        setLabel = setLabel + split\n                    label.setValue(setLabel)\n                    label.setEnabled(True)"}
addUserKnob {26 text_4 l " -" -STARTLINE T " "}
addUserKnob {22 unlink_selected l " unlink selected " -STARTLINE T "nodename = nuke.thisNode().knob('name').value()\nexp = 'parent.' + nodename + '.DT__state'\nref = '\{' + exp + '\}'\nalt = '\{!' + exp + '\}'\n\nfor node in nuke.selectedNodes():\n    if node is not nuke.thisNode():\n        if node.knob('disable'):\n            if node\['disable'].hasExpression():\n                if node\['disable'].toScript() in \[ref, alt]:\n                    node\['disable'].clearAnimated()\n                    node\['disable'].setValue(False)\n                    # SET COLOR TO DEFAULT\n                    tileColor = node\['tile_color']\n                    label = node\['label']\n                    tileColor.setValue(0)\n                    try:\n                        node\['tileColor']\n                        defaultValue = int(node\['tileColor'].value())\n                        tileColor.setValue(defaultValue)\n                        node.removeKnob(node\['tileColor'])\n                    except:\n                        pass\n                    # SET LABEL TO DEFAULT\n                    setLabel = \"\"\n                    splits = label.value().split('\\nFARM ONLY')\n                    for split in splits:\n                        setLabel = setLabel + split\n                    label.setValue(setLabel)\n                    label.setEnabled(True)\n\n\nnuke.thisNode().knob('link_total').setValue(0)"}
addUserKnob {22 unlink_all l " unlink all " -STARTLINE T "nodename = nuke.thisNode().knob('name').value()\nexp = 'parent.' + nodename + '.DT__state'\nref = '\{' + exp + '\}'\nalt = '\{!' + exp + '\}'\n\nfor node in nuke.allNodes():\n    if node is not nuke.thisNode():\n        if node.knob('disable'):\n            if node\['disable'].hasExpression():\n                if node\['disable'].toScript() in \[ref, alt]:\n                    node\['disable'].clearAnimated()\n                    node\['disable'].setValue(False)\n                    # SET COLOR TO DEFAULT\n                    tileColor = node\['tile_color']\n                    tileColor.setValue(0)\n                    label = node\['label']\n                    #REMET UNE COULOUR DEFINI PAR UN USER\n                    try:\n                        node\['tileColor']\n                        defaultValue = int(node\['tileColor'].value())\n                        tileColor.setValue(defaultValue)\n                        node.removeKnob(node\['tileColor'])\n                    except:\n                        pass\n                    # SET LABEL TO DEFAULT\n                    setLabel = \"\"\n                    splits = label.value().split('\\nFARM ONLY')\n                    for split in splits:\n                        setLabel = setLabel + split\n                    label.setValue(setLabel)\n                    label.setEnabled(True)\n\n\nnuke.thisNode().knob('link_total').setValue(0)\n"}
addUserKnob {26 text l " " T " "}
addUserKnob {22 reselect l "   select all links   " T "n = nuke.thisNode()\nnodename = n.knob('name').value()\nexp = 'parent.'+nodename+'.DT__state'\nref = '\{'+exp+'\}'\nalt = '\{!'+exp+'\}'\n\nn.selectOnly()\nn.setSelected(False)\n\nto_sel = \[]\n\nfor node in nuke.allNodes():\n    if node is not n:\n        if node.knob('disable'):\n            if node\['disable'].hasExpression():\n                if node\['disable'].toScript() in \[ref,alt]:\n                    to_sel.append(node)\n                    \nfor node in to_sel:\n    node.setSelected(True)" +STARTLINE}
addUserKnob {26 ""}
addUserKnob {26 text_2 l " " T " "}
addUserKnob {6 disable +STARTLINE}
disable true
addUserKnob {6 enable l "enable on farm" -STARTLINE}
enable true
addUserKnob {3 DT__state +INVISIBLE}
DT__state {{"!disable ? 0 : !enable ? 1 : \$gui"}}
addUserKnob {3 state_link -STARTLINE +INVISIBLE}
state_link {{"!disable ? !enable ? 3 : 0 : !enable ? 1 : 2"}}
addUserKnob {4 output -STARTLINE +INVISIBLE M {enable disable "farm only" "local only" "" "" "" "" "" "" "" ""}}
output {{this.state_link x1225 3}}
addUserKnob {3 link_total +INVISIBLE}
addUserKnob {22 link_total_update -STARTLINE +INVISIBLE T "nodename = nuke.thisNode().knob('name').value()\nexp = 'parent.'+nodename+'.DT__state'\nref = '\{'+exp+'\}'\nalt = '\{!'+exp+'\}'\n\nall_links = \[node for node in nuke.allNodes() if node.knob('disable') and node\['disable'].hasExpression()]\n\ntotal = len(\[node for node in all_links if node\['disable'].toScript() in \[ref,alt]])\n\nnuke.thisNode().knob('link_total').setValue(total)"}
addUserKnob {20 tab l -}
addUserKnob {26 contact l "" +STARTLINE T "<center>DisableThis  v1.3\n<center>© 2020 Vincent Forand - vincent.forand@outlook.com"}
addUserKnob {26 "" +STARTLINE}
addUserKnob {26 JBR l "" +STARTLINE T "Modifications:\n\n© 2021 JBR - jordanboulaisrichard@gmail.com"}
addUserKnob {20 vgas l Vgas +INVISIBLE}
addUserKnob {1 nativeUID +DISABLED}
nativeUID b8d857e4-888b-11ea-919c-04d9f5c8f286
}
